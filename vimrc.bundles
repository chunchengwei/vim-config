" ==========================================
" bundle 插件管理和配置项
" ==========================================

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


" ################### 插件管理 ###################

" 使用Vundle来管理插件
Plugin 'VundleVim/Vundle.vim'

" 使用vim查看man手册
Plugin 'vim-utils/vim-man'

" 快速切换头文件与源文件 A
Plugin 'a.vim'

" 多语言语法检查
Plugin 'scrooloose/syntastic'
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes', 'pep8']
" error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
let g:syntastic_python_pep8_args='--ignore=E501,E225,E124,E172'

" 修改高亮的背景色, 适应主题
" highlight SyntasticErrorSign guifg=white guibg=black

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
" nnoremap <Leader>sn :lnext<cr>
" nnoremap <Leader>sp :lprevious<cr>



" ################### 自动补全 ###################
Plugin 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabMappingForward = '<s-tab>'
let g:SuperTabMappingBackward = '<tab>'

" Plugin 'Valloric/YouCompleteMe'
" " "youcompleteme  默认tab  s-tab 和自动补全冲突
" " let g:ycm_show_diagnostics_ui = 0
" let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
" let g:ycm_collect_identifiers_from_tags_files = 1
" " 开启语法关键字补全
" let g:ycm_seed_identifiers_with_syntax=1

" " 跳转到定义处, 分屏打开
" let g:ycm_goto_buffer_command = 'vertical-split'
" nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

" " 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
" let g:ycm_confirm_extra_conf=0
" let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"

" " syntax using ycm
" let g:syntastic_error_symbol='✗'
" let g:syntastic_warning_symbol='⚠'


" " 代码片段快速插入
" Plugin 'SirVer/ultisnips'
" let g:UltiSnipsExpandTrigger       = "<tab>"
" let g:UltiSnipsJumpForwardTrigger  = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
" let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
" " 进入对应filetype的snippets进行编辑
" map <leader>us :UltiSnipsEdit<CR>

" " ctrl+j/k 进行选择
" func! g:JInYCM()
    " if pumvisible()
        " return "\<C-n>"
    " else
        " return "\<c-j>"
    " endif
" endfunction

" func! g:KInYCM()
    " if pumvisible()
        " return "\<C-p>"
    " else
        " return "\<c-k>"
    " endif
" endfunction
" inoremap <c-j> <c-r>=g:JInYCM()<cr>
" au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
" let g:UltiSnipsJumpBackwordTrigger = "<c-k>"

" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:)
" Plugin 'honza/vim-snippets'

" " 自动补全单引号，双引号等
" Plugin 'Raimondi/delimitMate'
" " 优化输入
" au FileType python let b:delimitMate_nesting_quotes = ['"']


" ################### 快速编码 ###################

" 快速注释
Plugin 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1

" 快速加入修改环绕字符
" Plugin 'tpope/vim-surround'

" . to repeat command
Plugin 'tpope/vim-repeat'

" 快速去行尾空格 [, + <Space>]
Plugin 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>

" 快速赋值语句对齐
Plugin 'junegunn/vim-easy-align'
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }



" ################### 快速移动 ###################

"更高效的移动 [,, + w/fx]
Plugin 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
map <Leader><leader>. <Plug>(easymotion-repeat)

" Plugin 'vim-scripts/matchit.zip'

Plugin 'kshenoy/vim-signature'
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks



" ################### 功能相关 ###################

" 文件搜索
Plugin 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
" 如果安装了ag, 使用ag
" if executable('ag')
  " let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " let g:ctrlp_use_caching = 0
" endif

" 函数搜索
" Plugin 'tacahiroy/ctrlp-funky'
" nnoremap <Leader>fu :CtrlPFunky<Cr>
" nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
" let g:ctrlp_funky_syntax_highlight = 1
" let g:ctrlp_extensions = ['funky']

" 全局搜索
" Plugin 'dyng/ctrlsf.vim'
" let g:ctrlsf_ackprg = 'ack'
" nmap \ <Plug>CtrlSFCwordPath<CR>
" nnoremap <leader>so :CtrlSFOpen<CR>
" " let g:ctrlsf_auto_close = 0

" 处理简单diff编辑操作
" Plugin 'tpope/vim-fugitive'
" nnoremap <leader>ge :Gdiff<CR>
" nnoremap <leader>gs :Gstatus<CR>
" nnoremap <leader>gl :Glog<CR>

" 同git diff,实时展示文件中修改的行
" Plugin 'airblade/vim-gitgutter'
" let g:gitgutter_map_keys = 0
" let g:gitgutter_enabled = 1
" let g:gitgutter_signs = 1
" let g:gitgutter_highlight_lines = 1
" nnoremap <leader>gs :GitGutterToggle<CR>

" ################### 显示增强 ###################

" 状态栏增强展示
Plugin 'bling/vim-airline'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'

" Themes of vim-airline
Plugin 'vim-airline/vim-airline-themes'
set t_Co=256
" let g:airline_theme="onedark"
" let g:airline_theme="light"
" let g:airline_theme="cool"
" let g:airline_theme="badwolf"
" let g:airline_theme="base16_ashes"
" let g:airline_theme="base16_twilight"
" let g:airline_theme="base16color"
" let g:airline_theme="ravenpower"
let g:airline_theme="solarized"
let g:airline_solarized_bg='dark'

" 括号显示增强
" Plugin 'kien/rainbow_parentheses.vim'
" let g:rbpt_colorpairs = [
    " \ ['brown',       'RoyalBlue3'],
    " \ ['Darkblue',    'SeaGreen3'],
    " \ ['darkgray',    'DarkOrchid3'],
    " \ ['darkgreen',   'firebrick3'],
    " \ ['darkcyan',    'RoyalBlue3'],
    " \ ['darkred',     'SeaGreen3'],
    " \ ['darkmagenta', 'DarkOrchid3'],
    " \ ['brown',       'firebrick3'],
    " \ ['gray',        'RoyalBlue3'],
    " \ ['darkmagenta', 'DarkOrchid3'],
    " \ ['Darkblue',    'firebrick3'],
    " \ ['darkgreen',   'RoyalBlue3'],
    " \ ['darkcyan',    'SeaGreen3'],
    " \ ['darkred',     'DarkOrchid3'],
    " \ ['red',         'firebrick3'],
    " \ ]

" let g:rbpt_max = 16
" let g:rbpt_loadcmd_toggle = 0
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces

" 主题 solarized
" Plugin 'altercation/vim-colors-solarized'
" let g:solarized_termtrans=1
" let g:solarized_contrast="normal"
" let g:solarized_visibility="normal"
" let g:solarized_termcolors=256



" ################### 快速导航 ###################

Plugin 'scrooloose/nerdtree'
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
" 如果只有NEARTree，则关闭vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'

Plugin 'jistr/vim-nerdtree-tabs'
map <Leader>n <plug>NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0
"let g:nerdtree_tabs_open_on_console_startup=1

" Plugin 'szw/vim-ctrlspace'
" let g:airline_exclude_preview = 1
" hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
" hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
" hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
" hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

" 标签导航
Plugin 'majutsushi/tagbar'
nmap <F9> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }



" ################### 语言相关 ###################

" " Python相关
" Plugin 'kevinw/pyflakes-vim'
" let g:pyflakes_use_quickfix = 0
" Plugin 'hdima/python-syntax'
" let python_highlight_all = 1

" Markdown相关
" Plugin 'plasticboy/vim-markdown'
" let g:vim_markdown_folding_disabled=1

" Javascript相关
" Plugin 'jelera/vim-javascript-syntax'
" Plugin 'pangloss/vim-javascript'
" let g:html_indent_inctags = "html,body,head,tbody"
" let g:html_indent_script1 = "inc"
" let g:html_indent_style1 = "inc"

" 强大的web前端必备插件
" Plugin 'mattn/emmet-vim'

" 基于tmux多屏的无缝跳转
" Plugin 'christoomey/vim-tmux-navigator'

" LUA相关配置
" Plugin 'lua.vim'
" Plugin 'xolox/vim-misc'
" Plugin 'xolox/vim-lua-ftplugin'

" ################### latex ###################
" Plugin 'lervag/vimtex'
" let g:vimtex_compiler_callback_hooks = ['MyTestHook']
" function! MyTestHook(status)
  " echom a:status
" endfunction

" let g:vimtex_view_method = 'zathura'
" nmap <special><F2> <plug>(vimtex-compile)
" nmap <special><F3> <plug>(vimtex-view)
" nmap <special><F4> <plug>(vimtex-info)


call vundle#end()            " required
